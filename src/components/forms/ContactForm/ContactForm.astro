---
import { IconButton } from "@components/common/button/IconButton";
import { Sprite } from "astro-iconify";
import type { HTMLAttributes } from "astro/types";
import { twMerge } from "tailwind-merge";

interface Props extends HTMLAttributes<"form"> {}

const { class: extraClass } = Astro.props;
---

<form
  id="contact-form"
  method="POST"
  class={twMerge("grid gap-8 rounded-lg pt-8 pb-16", extraClass)}
>
  <h2>
    <Sprite
      name="mdi:connection"
      class="mr-2 inline aspect-square w-12 pb-2"
    />Connect with me!
  </h2>
  <label>
    <Sprite name="mdi:email-outline" class="inline aspect-square w-6 pb-1" />
    Your Email
    <input
      name="email"
      type="email"
      autocomplete="email"
      required
      maxlength="254"
      class="mt-2 sm:w-[30ch]"
    />
  </label>
  <label>
    <Sprite name="mdi:message-text-outline" class="inline aspect-square w-6" />
    Message
    <small class="inline italic">(max 3000 characters)</small>
    <textarea
      name="message"
      required
      class="mt-2 h-max"
      maxlength="3000"
      rows={4}
      >{
        "Introduce your *name* and your *objective* here, along with your preferred platforms for further conversations!"
      }</textarea
    >
  </label>
  <IconButton
    name="mdi:send"
    iconClass="h-6 aspect-square"
    hasContent
    position="right"
    class="max-w-fit"
    type="submit"
    hoverBorder
  >
    Send it off to me!
  </IconButton>
  <small>
    This site is protected by reCAPTCHA, and the Google
    <a href="https://policies.google.com/privacy">Privacy Policy</a> and
    <a href="https://policies.google.com/terms">Terms of Service</a> apply.
  </small>
</form>

<script>
  // @ts-nocheck

  // https://www.youtube.com/watch?v=TCJ-YrcLOTM
  // https://github.com/PipedreamHQ/nextjs-examples/blob/main/examples/contact-form/pages/components/ContactForm.js
  async function submit(event) {
    event.preventDefault();

    if (typeof grecaptcha === "undefined") {
      grecaptcha = {};
    }

    grecaptcha.ready = function (cb) {
      if (typeof grecaptcha === "undefined") {
        const c = "___grecaptcha_cfg";
        window[c] = window[c] || {};
        (window[c]["fns"] = window[c]["fns"] || []).push(cb);
      } else {
        cb();
      }
    };

    try {
      grecaptcha.ready(async function () {
        const token = await grecaptcha.execute(
          import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY,
          { action: "submit" }
        );

        // Build form body
        const formData = new FormData(event.target);
        const requestBody = {
          email: formData.get("email"),
          message: formData.get("message"),
          token,
        };

        // Fetch
        await fetch(import.meta.env.PUBLIC_PIPEDREAM_URL, {
          method: "POST",
          body: JSON.stringify(requestBody),
        });
      });
      console.log("success!");
    } catch (e) {
      console.error(e);
    }
  }
  const form = document.getElementById("contact-form");

  if (form) form.addEventListener("submit", submit, true);
</script>

<style is:global>
  .grecaptcha-badge {
    visibility: hidden;
  }
</style>
